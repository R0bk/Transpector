"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_datalayer_jupyterlite-ipykernel_lib_index_js"],{

/***/ "./node_modules/@datalayer/jupyterlite-ipykernel/lib/_pypi.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datalayer/jupyterlite-ipykernel/lib/_pypi.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PIPLITE_WHEEL\": function() { return /* binding */ PIPLITE_WHEEL; }\n/* harmony export */ });\n// this file is autogenerated from the wheels described in ../package.json\n// export * as allJSONUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/all.json';\n// export * as ipykernelWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/ipykernel-6.9.2-py3-none-any.whl';\n// export * as pipliteWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/piplite-0.1.0b11-py3-none-any.whl';\n// export * as pyoliteWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/pyolite-0.1.0b11-py3-none-any.whl';\n// export * as widgetsnbextensionWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/widgetsnbextension-3.6.0-py3-none-any.whl';\nconst PIPLITE_WHEEL = 'piplite-0.1.0b11-py3-none-any.whl';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRhdGFsYXllci9qdXB5dGVybGl0ZS1pcHlrZXJuZWwvbGliL19weXBpLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGRhdGFsYXllci9qdXB5dGVybGl0ZS1pcHlrZXJuZWwvbGliL19weXBpLmpzPzk0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhpcyBmaWxlIGlzIGF1dG9nZW5lcmF0ZWQgZnJvbSB0aGUgd2hlZWxzIGRlc2NyaWJlZCBpbiAuLi9wYWNrYWdlLmpzb25cbi8vIGV4cG9ydCAqIGFzIGFsbEpTT05VcmwgZnJvbSAnISFmaWxlLWxvYWRlcj9uYW1lPXB5cGkvW25hbWVdLltleHRdJmNvbnRleHQ9LiEuLi9weXBpL2FsbC5qc29uJztcbi8vIGV4cG9ydCAqIGFzIGlweWtlcm5lbFdoZWVsVXJsIGZyb20gJyEhZmlsZS1sb2FkZXI/bmFtZT1weXBpL1tuYW1lXS5bZXh0XSZjb250ZXh0PS4hLi4vcHlwaS9pcHlrZXJuZWwtNi45LjItcHkzLW5vbmUtYW55LndobCc7XG4vLyBleHBvcnQgKiBhcyBwaXBsaXRlV2hlZWxVcmwgZnJvbSAnISFmaWxlLWxvYWRlcj9uYW1lPXB5cGkvW25hbWVdLltleHRdJmNvbnRleHQ9LiEuLi9weXBpL3BpcGxpdGUtMC4xLjBiMTEtcHkzLW5vbmUtYW55LndobCc7XG4vLyBleHBvcnQgKiBhcyBweW9saXRlV2hlZWxVcmwgZnJvbSAnISFmaWxlLWxvYWRlcj9uYW1lPXB5cGkvW25hbWVdLltleHRdJmNvbnRleHQ9LiEuLi9weXBpL3B5b2xpdGUtMC4xLjBiMTEtcHkzLW5vbmUtYW55LndobCc7XG4vLyBleHBvcnQgKiBhcyB3aWRnZXRzbmJleHRlbnNpb25XaGVlbFVybCBmcm9tICchIWZpbGUtbG9hZGVyP25hbWU9cHlwaS9bbmFtZV0uW2V4dF0mY29udGV4dD0uIS4uL3B5cGkvd2lkZ2V0c25iZXh0ZW5zaW9uLTMuNi4wLXB5My1ub25lLWFueS53aGwnO1xuZXhwb3J0IGNvbnN0IFBJUExJVEVfV0hFRUwgPSAncGlwbGl0ZS0wLjEuMGIxMS1weTMtbm9uZS1hbnkud2hsJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@datalayer/jupyterlite-ipykernel/lib/_pypi.js\n"));

/***/ }),

/***/ "./node_modules/@datalayer/jupyterlite-ipykernel/lib/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datalayer/jupyterlite-ipykernel/lib/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PIPLITE_WHEEL\": function() { return /* reexport safe */ _pypi__WEBPACK_IMPORTED_MODULE_0__.PIPLITE_WHEEL; },\n/* harmony export */   \"PyoliteKernel\": function() { return /* reexport safe */ _kernel__WEBPACK_IMPORTED_MODULE_1__.PyoliteKernel; },\n/* harmony export */   \"PyoliteRemoteKernel\": function() { return /* reexport safe */ _worker__WEBPACK_IMPORTED_MODULE_2__.PyoliteRemoteKernel; }\n/* harmony export */ });\n/* harmony import */ var _pypi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_pypi */ \"./node_modules/@datalayer/jupyterlite-ipykernel/lib/_pypi.js\");\n/* harmony import */ var _kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernel */ \"./node_modules/@datalayer/jupyterlite-ipykernel/lib/kernel.js\");\n/* harmony import */ var _worker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worker */ \"./node_modules/@datalayer/jupyterlite-ipykernel/lib/worker.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRhdGFsYXllci9qdXB5dGVybGl0ZS1pcHlrZXJuZWwvbGliL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDd0I7QUFDUztBQUNSO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGRhdGFsYXllci9qdXB5dGVybGl0ZS1pcHlrZXJuZWwvbGliL2luZGV4LmpzPzI2Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBKdXB5dGVyIERldmVsb3BtZW50IFRlYW0uXG4vLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1vZGlmaWVkIEJTRCBMaWNlbnNlLlxuZXhwb3J0ICogZnJvbSAnLi9fcHlwaSc7XG5leHBvcnQgKiBmcm9tICcuL2NvbWxpbmsud29ya2VyJztcbmV4cG9ydCAqIGZyb20gJy4va2VybmVsJztcbmV4cG9ydCAqIGZyb20gJy4vdG9rZW5zJztcbmV4cG9ydCAqIGZyb20gJy4vd29ya2VyJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@datalayer/jupyterlite-ipykernel/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/@datalayer/jupyterlite-ipykernel/lib/kernel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@datalayer/jupyterlite-ipykernel/lib/kernel.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PyoliteKernel\": function() { return /* binding */ PyoliteKernel; }\n/* harmony export */ });\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ \"./node_modules/@lumino/coreutils/dist/index.js\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"./node_modules/@jupyterlab/coreutils/lib/index.js\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _datalayer_jupyterlite_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @datalayer/jupyterlite-kernel */ \"./node_modules/@datalayer/jupyterlite-kernel/lib/kernel.js\");\n/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! comlink */ \"./node_modules/comlink/dist/esm/comlink.mjs\");\n/* harmony import */ var _pypi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_pypi */ \"./node_modules/@datalayer/jupyterlite-ipykernel/lib/_pypi.js\");\n\n\n\n\n\n/**\n * A kernel that executes Python code with Pyodide.\n */\nclass PyoliteKernel extends _datalayer_jupyterlite_kernel__WEBPACK_IMPORTED_MODULE_1__.BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        super(options);\n        this._ready = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.PromiseDelegate();\n        this._worker = this.initWorker(options);\n        this._worker.onmessage = (e) => this._processWorkerMessage(e.data);\n        this._remoteKernel = this.initRemote(options);\n        this._ready.resolve();\n    }\n    /**\n     * Load the worker.\n     *\n     * ### Note\n     *\n     * Subclasses must implement this typographically almost _exactly_ for\n     * webpack to find it.\n     */\n    initWorker(options) {\n        return new Worker(__webpack_require__.tu(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"node_modules_datalayer_jupyterlite-ipykernel_lib_comlink_worker_js\"), __webpack_require__.b)), {\n            type: undefined,\n        });\n    }\n    initRemote(options) {\n        const remote = (0,comlink__WEBPACK_IMPORTED_MODULE_2__.wrap)(this._worker);\n        const remoteOptions = this.initRemoteOptions(options);\n        remote.initialize(remoteOptions);\n        return remote;\n    }\n    initRemoteOptions(options) {\n        const { pyodideUrl } = options;\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const baseUrl = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getBaseUrl();\n        //    const pypi = URLExt.join(baseUrl, 'build/pypi');\n        const pypi = \"https://datalayer-assets.s3.us-west-2.amazonaws.com/pypi\";\n        const pipliteUrls = [...(options.pipliteUrls || []), _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.URLExt.join(pypi, 'all.json')];\n        const pipliteWheelUrl = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.URLExt.join(pypi, _pypi__WEBPACK_IMPORTED_MODULE_4__.PIPLITE_WHEEL);\n        const disablePyPIFallback = !!options.disablePyPIFallback;\n        return {\n            baseUrl,\n            pyodideUrl,\n            indexUrl,\n            pipliteWheelUrl,\n            pipliteUrls,\n            disablePyPIFallback,\n            location: this.location,\n            mountDrive: options.mountDrive,\n        };\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._worker.terminate();\n        this._worker = null;\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!msg.type) {\n            return;\n        }\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle, msg.parentHeader);\n                break;\n            }\n            case 'input_request': {\n                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };\n                this.inputRequest(bundle, msg.parentHeader);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };\n                this.clearOutput(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : { execution_count: 0, data: {}, metadata: {} };\n                this.publishExecuteResult(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle, msg.parentHeader);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);\n                break;\n            }\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3,\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8',\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Pyolite: A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org',\n                },\n            ],\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const result = await this._remoteKernel.execute(content, this.parent);\n        result.execution_count = this.executionCount;\n        return result;\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._remoteKernel.complete(content, this.parent);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._remoteKernel.inspect(content, this.parent);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._remoteKernel.isComplete(content, this.parent);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._remoteKernel.commInfo(content, this.parent);\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._remoteKernel.commOpen(msg, this.parent);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._remoteKernel.commMsg(msg, this.parent);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._remoteKernel.commClose(msg, this.parent);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    async inputReply(content) {\n        return await this._remoteKernel.inputReply(content, this.parent);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@datalayer/jupyterlite-ipykernel/lib/kernel.js\n"));

/***/ }),

/***/ "./node_modules/@datalayer/jupyterlite-ipykernel/lib/worker.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@datalayer/jupyterlite-ipykernel/lib/worker.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PyoliteRemoteKernel\": function() { return /* binding */ PyoliteRemoteKernel; }\n/* harmony export */ });\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nclass PyoliteRemoteKernel {\n    constructor() {\n        /**\n         * Initialization options.\n         */\n        this._options = null;\n        this._initializer = null;\n        /** TODO: real typing */\n        this._localPath = '';\n        this._driveName = '';\n        this._initialized = new Promise((resolve, reject) => {\n            this._initializer = { resolve, reject };\n        });\n    }\n    /**\n     * Accept the URLs from the host\n     **/\n    async initialize(options) {\n        var _a;\n        this._options = options;\n        if (options.location.includes(':')) {\n            const parts = options.location.split(':');\n            this._driveName = parts[0];\n            this._localPath = parts[1];\n        }\n        else {\n            this._driveName = '';\n            this._localPath = options.location;\n        }\n        await this.initRuntime(options);\n        await this.initPackageManager(options);\n        await this.initKernel(options);\n        await this.initGlobals(options);\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.resolve();\n    }\n    async initRuntime(options) {\n        const { pyodideUrl, indexUrl } = options;\n        if (pyodideUrl.endsWith('.mjs')) {\n            const pyodideModule = await import(/* webpackIgnore: true */ pyodideUrl);\n            this._pyodide = await pyodideModule.loadPyodide({ indexURL: indexUrl });\n        }\n        else {\n            importScripts(pyodideUrl);\n            this._pyodide = await self.loadPyodide({ indexURL: indexUrl });\n        }\n    }\n    async initPackageManager(options) {\n        if (!this._options) {\n            throw new Error('Uninitialized');\n        }\n        const { pipliteWheelUrl, disablePyPIFallback, pipliteUrls } = this._options;\n        // this is the only use of `loadPackage`, allow `piplite` to handle the rest\n        await this._pyodide.loadPackage(['micropip']);\n        // get piplite early enough to impact pyolite dependencies\n        await this._pyodide.runPythonAsync(`\n      import micropip\n      await micropip.install('${pipliteWheelUrl}', keep_going=True)\n      import piplite.piplite\n      piplite.piplite._PIPLITE_DISABLE_PYPI = ${disablePyPIFallback ? 'True' : 'False'}\n      piplite.piplite._PIPLITE_URLS = ${JSON.stringify(pipliteUrls)}\n    `);\n    }\n    async initKernel(options) {\n        // from this point forward, only use piplite\n        await this._pyodide.runPythonAsync(`\n      await piplite.install(['matplotlib', 'ipykernel'], keep_going=True);\n      await piplite.install(['pyolite'], keep_going=True);\n      await piplite.install(['ipython'], keep_going=True);\n      import pyolite\n    `);\n        // cd to the kernel location\n        if (options.mountDrive && this._localPath) {\n            await this._pyodide.runPythonAsync(`\n        import os;\n        os.chdir(\"${this._localPath}\");\n      `);\n        }\n    }\n    async initGlobals(options) {\n        const { globals } = this._pyodide;\n        this._kernel = globals.get('pyolite').kernel_instance.copy();\n        this._stdout_stream = globals.get('pyolite').stdout_stream.copy();\n        this._stderr_stream = globals.get('pyolite').stderr_stream.copy();\n        this._interpreter = this._kernel.interpreter.copy();\n        this._interpreter.send_comm = this.sendComm.bind(this);\n    }\n    /**\n     * Recursively convert a Map to a JavaScript object\n     * @param obj A Map, Array, or other  object to convert\n     */\n    mapToObject(obj) {\n        const out = obj instanceof Array ? [] : {};\n        obj.forEach((value, key) => {\n            out[key] =\n                value instanceof Map || value instanceof Array\n                    ? this.mapToObject(value)\n                    : value;\n        });\n        return out;\n    }\n    /**\n     * Format the response from the Pyodide evaluation.\n     *\n     * @param res The result object from the Pyodide evaluation\n     */\n    formatResult(res) {\n        if (!this._pyodide.isPyProxy(res)) {\n            return res;\n        }\n        // TODO: this is a bit brittle\n        const m = res.toJs();\n        const results = this.mapToObject(m);\n        return results;\n    }\n    /**\n     * Makes sure pyodide is ready before continuing, and cache the parent message.\n     */\n    async setup(parent) {\n        await this._initialized;\n        this._kernel._parent_header = this._pyodide.toPy(parent);\n    }\n    /**\n     * Execute code with the interpreter.\n     *\n     * @param content The incoming message with the code to execute.\n     */\n    async execute(content, parent) {\n        await this.setup(parent);\n        const publishExecutionResult = (prompt_count, data, metadata) => {\n            const bundle = {\n                execution_count: prompt_count,\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'execute_result',\n            });\n        };\n        const publishExecutionError = (ename, evalue, traceback) => {\n            const bundle = {\n                ename: ename,\n                evalue: evalue,\n                traceback: traceback,\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'execute_error',\n            });\n        };\n        const clearOutputCallback = (wait) => {\n            const bundle = {\n                wait: this.formatResult(wait),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'clear_output',\n            });\n        };\n        const displayDataCallback = (data, metadata, transient) => {\n            const bundle = {\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n                transient: this.formatResult(transient),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'display_data',\n            });\n        };\n        const updateDisplayDataCallback = (data, metadata, transient) => {\n            const bundle = {\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n                transient: this.formatResult(transient),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'update_display_data',\n            });\n        };\n        const publishStreamCallback = (name, text) => {\n            const bundle = {\n                name: this.formatResult(name),\n                text: this.formatResult(text),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'stream',\n            });\n        };\n        this._stdout_stream.publish_stream_callback = publishStreamCallback;\n        this._stderr_stream.publish_stream_callback = publishStreamCallback;\n        this._interpreter.display_pub.clear_output_callback = clearOutputCallback;\n        this._interpreter.display_pub.display_data_callback = displayDataCallback;\n        this._interpreter.display_pub.update_display_data_callback =\n            updateDisplayDataCallback;\n        this._interpreter.displayhook.publish_execution_result = publishExecutionResult;\n        this._interpreter.input = this.input.bind(this);\n        this._interpreter.getpass = this.getpass.bind(this);\n        const res = await this._kernel.run(content.code);\n        const results = this.formatResult(res);\n        if (results['status'] === 'error') {\n            publishExecutionError(results['ename'], results['evalue'], results['traceback']);\n        }\n        return results;\n    }\n    /**\n     * Complete the code submitted by a user.\n     *\n     * @param content The incoming message with the code to complete.\n     */\n    async complete(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.complete(content.code, content.cursor_pos);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Inspect the code submitted by a user.\n     *\n     * @param content The incoming message with the code to inspect.\n     */\n    async inspect(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.inspect(content.code, content.cursor_pos, content.detail_level);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Check code for completeness submitted by a user.\n     *\n     * @param content The incoming message with the code to check.\n     */\n    async isComplete(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.is_complete(content.code);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commInfoRequest.\n     *\n     * @param content The incoming message with the comm target name.\n     */\n    async commInfo(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_info(content.target_name);\n        const results = this.formatResult(res);\n        return {\n            comms: results,\n            status: 'ok',\n        };\n    }\n    /**\n     * Respond to the commOpen.\n     *\n     * @param content The incoming message with the comm open.\n     */\n    async commOpen(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_open(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commMsg.\n     *\n     * @param content The incoming message with the comm msg.\n     */\n    async commMsg(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_msg(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commClose.\n     *\n     * @param content The incoming message with the comm close.\n     */\n    async commClose(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_close(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Resolve the input request by getting back the reply from the main thread\n     *\n     * @param content The incoming message with the reply\n     */\n    async inputReply(content, parent) {\n        await this.setup(parent);\n        this._resolveInputReply(content);\n    }\n    /**\n     * Send a input request to the front-end.\n     *\n     * @param prompt the text to show at the prompt\n     * @param password Is the request for a password?\n     */\n    async sendInputRequest(prompt, password) {\n        const content = {\n            prompt,\n            password,\n        };\n        postMessage({\n            type: 'input_request',\n            parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n            content,\n        });\n    }\n    async getpass(prompt) {\n        prompt = typeof prompt === 'undefined' ? '' : prompt;\n        await this.sendInputRequest(prompt, true);\n        const replyPromise = new Promise((resolve) => {\n            this._resolveInputReply = resolve;\n        });\n        const result = await replyPromise;\n        return result['value'];\n    }\n    async input(prompt) {\n        prompt = typeof prompt === 'undefined' ? '' : prompt;\n        await this.sendInputRequest(prompt, false);\n        const replyPromise = new Promise((resolve) => {\n            this._resolveInputReply = resolve;\n        });\n        const result = await replyPromise;\n        return result['value'];\n    }\n    /**\n     * Send a comm message to the front-end.\n     *\n     * @param type The type of the comm message.\n     * @param content The content.\n     * @param metadata The metadata.\n     * @param ident The ident.\n     * @param buffers The binary buffers.\n     */\n    async sendComm(type, content, metadata, ident, buffers) {\n        postMessage({\n            type: type,\n            content: this.formatResult(content),\n            metadata: this.formatResult(metadata),\n            ident: this.formatResult(ident),\n            buffers: this.formatResult(buffers),\n            parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRhdGFsYXllci9qdXB5dGVybGl0ZS1pcHlrZXJuZWwvbGliL3dvcmtlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQSw4REFBOEQsb0JBQW9CO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxvQkFBb0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFvRDtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBLGdEQUFnRDtBQUNoRCx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BkYXRhbGF5ZXIvanVweXRlcmxpdGUtaXB5a2VybmVsL2xpYi93b3JrZXIuanM/YWE1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEp1cHl0ZXIgRGV2ZWxvcG1lbnQgVGVhbS5cbi8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTW9kaWZpZWQgQlNEIExpY2Vuc2UuXG5leHBvcnQgY2xhc3MgUHlvbGl0ZVJlbW90ZUtlcm5lbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsaXphdGlvbiBvcHRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVyID0gbnVsbDtcbiAgICAgICAgLyoqIFRPRE86IHJlYWwgdHlwaW5nICovXG4gICAgICAgIHRoaXMuX2xvY2FsUGF0aCA9ICcnO1xuICAgICAgICB0aGlzLl9kcml2ZU5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplciA9IHsgcmVzb2x2ZSwgcmVqZWN0IH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY2NlcHQgdGhlIFVSTHMgZnJvbSB0aGUgaG9zdFxuICAgICAqKi9cbiAgICBhc3luYyBpbml0aWFsaXplKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYXRpb24uaW5jbHVkZXMoJzonKSkge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBvcHRpb25zLmxvY2F0aW9uLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICB0aGlzLl9kcml2ZU5hbWUgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUGF0aCA9IHBhcnRzWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZHJpdmVOYW1lID0gJyc7XG4gICAgICAgICAgICB0aGlzLl9sb2NhbFBhdGggPSBvcHRpb25zLmxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdFJ1bnRpbWUob3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdFBhY2thZ2VNYW5hZ2VyKG9wdGlvbnMpO1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRLZXJuZWwob3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdEdsb2JhbHMob3B0aW9ucyk7XG4gICAgICAgIChfYSA9IHRoaXMuX2luaXRpYWxpemVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBhc3luYyBpbml0UnVudGltZShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcHlvZGlkZVVybCwgaW5kZXhVcmwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChweW9kaWRlVXJsLmVuZHNXaXRoKCcubWpzJykpIHtcbiAgICAgICAgICAgIGNvbnN0IHB5b2RpZGVNb2R1bGUgPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyBweW9kaWRlVXJsKTtcbiAgICAgICAgICAgIHRoaXMuX3B5b2RpZGUgPSBhd2FpdCBweW9kaWRlTW9kdWxlLmxvYWRQeW9kaWRlKHsgaW5kZXhVUkw6IGluZGV4VXJsIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhweW9kaWRlVXJsKTtcbiAgICAgICAgICAgIHRoaXMuX3B5b2RpZGUgPSBhd2FpdCBzZWxmLmxvYWRQeW9kaWRlKHsgaW5kZXhVUkw6IGluZGV4VXJsIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGluaXRQYWNrYWdlTWFuYWdlcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmluaXRpYWxpemVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBwaXBsaXRlV2hlZWxVcmwsIGRpc2FibGVQeVBJRmFsbGJhY2ssIHBpcGxpdGVVcmxzIH0gPSB0aGlzLl9vcHRpb25zO1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBvbmx5IHVzZSBvZiBgbG9hZFBhY2thZ2VgLCBhbGxvdyBgcGlwbGl0ZWAgdG8gaGFuZGxlIHRoZSByZXN0XG4gICAgICAgIGF3YWl0IHRoaXMuX3B5b2RpZGUubG9hZFBhY2thZ2UoWydtaWNyb3BpcCddKTtcbiAgICAgICAgLy8gZ2V0IHBpcGxpdGUgZWFybHkgZW5vdWdoIHRvIGltcGFjdCBweW9saXRlIGRlcGVuZGVuY2llc1xuICAgICAgICBhd2FpdCB0aGlzLl9weW9kaWRlLnJ1blB5dGhvbkFzeW5jKGBcbiAgICAgIGltcG9ydCBtaWNyb3BpcFxuICAgICAgYXdhaXQgbWljcm9waXAuaW5zdGFsbCgnJHtwaXBsaXRlV2hlZWxVcmx9Jywga2VlcF9nb2luZz1UcnVlKVxuICAgICAgaW1wb3J0IHBpcGxpdGUucGlwbGl0ZVxuICAgICAgcGlwbGl0ZS5waXBsaXRlLl9QSVBMSVRFX0RJU0FCTEVfUFlQSSA9ICR7ZGlzYWJsZVB5UElGYWxsYmFjayA/ICdUcnVlJyA6ICdGYWxzZSd9XG4gICAgICBwaXBsaXRlLnBpcGxpdGUuX1BJUExJVEVfVVJMUyA9ICR7SlNPTi5zdHJpbmdpZnkocGlwbGl0ZVVybHMpfVxuICAgIGApO1xuICAgIH1cbiAgICBhc3luYyBpbml0S2VybmVsKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gZnJvbSB0aGlzIHBvaW50IGZvcndhcmQsIG9ubHkgdXNlIHBpcGxpdGVcbiAgICAgICAgYXdhaXQgdGhpcy5fcHlvZGlkZS5ydW5QeXRob25Bc3luYyhgXG4gICAgICBhd2FpdCBwaXBsaXRlLmluc3RhbGwoWydtYXRwbG90bGliJywgJ2lweWtlcm5lbCddLCBrZWVwX2dvaW5nPVRydWUpO1xuICAgICAgYXdhaXQgcGlwbGl0ZS5pbnN0YWxsKFsncHlvbGl0ZSddLCBrZWVwX2dvaW5nPVRydWUpO1xuICAgICAgYXdhaXQgcGlwbGl0ZS5pbnN0YWxsKFsnaXB5dGhvbiddLCBrZWVwX2dvaW5nPVRydWUpO1xuICAgICAgaW1wb3J0IHB5b2xpdGVcbiAgICBgKTtcbiAgICAgICAgLy8gY2QgdG8gdGhlIGtlcm5lbCBsb2NhdGlvblxuICAgICAgICBpZiAob3B0aW9ucy5tb3VudERyaXZlICYmIHRoaXMuX2xvY2FsUGF0aCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcHlvZGlkZS5ydW5QeXRob25Bc3luYyhgXG4gICAgICAgIGltcG9ydCBvcztcbiAgICAgICAgb3MuY2hkaXIoXCIke3RoaXMuX2xvY2FsUGF0aH1cIik7XG4gICAgICBgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpbml0R2xvYmFscyhvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZ2xvYmFscyB9ID0gdGhpcy5fcHlvZGlkZTtcbiAgICAgICAgdGhpcy5fa2VybmVsID0gZ2xvYmFscy5nZXQoJ3B5b2xpdGUnKS5rZXJuZWxfaW5zdGFuY2UuY29weSgpO1xuICAgICAgICB0aGlzLl9zdGRvdXRfc3RyZWFtID0gZ2xvYmFscy5nZXQoJ3B5b2xpdGUnKS5zdGRvdXRfc3RyZWFtLmNvcHkoKTtcbiAgICAgICAgdGhpcy5fc3RkZXJyX3N0cmVhbSA9IGdsb2JhbHMuZ2V0KCdweW9saXRlJykuc3RkZXJyX3N0cmVhbS5jb3B5KCk7XG4gICAgICAgIHRoaXMuX2ludGVycHJldGVyID0gdGhpcy5fa2VybmVsLmludGVycHJldGVyLmNvcHkoKTtcbiAgICAgICAgdGhpcy5faW50ZXJwcmV0ZXIuc2VuZF9jb21tID0gdGhpcy5zZW5kQ29tbS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBjb252ZXJ0IGEgTWFwIHRvIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAgICAgKiBAcGFyYW0gb2JqIEEgTWFwLCBBcnJheSwgb3Igb3RoZXIgIG9iamVjdCB0byBjb252ZXJ0XG4gICAgICovXG4gICAgbWFwVG9PYmplY3Qob2JqKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gW10gOiB7fTtcbiAgICAgICAgb2JqLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIG91dFtrZXldID1cbiAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIE1hcCB8fCB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5tYXBUb09iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcm1hdCB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgUHlvZGlkZSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcyBUaGUgcmVzdWx0IG9iamVjdCBmcm9tIHRoZSBQeW9kaWRlIGV2YWx1YXRpb25cbiAgICAgKi9cbiAgICBmb3JtYXRSZXN1bHQocmVzKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHlvZGlkZS5pc1B5UHJveHkocmVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgYml0IGJyaXR0bGVcbiAgICAgICAgY29uc3QgbSA9IHJlcy50b0pzKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLm1hcFRvT2JqZWN0KG0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgc3VyZSBweW9kaWRlIGlzIHJlYWR5IGJlZm9yZSBjb250aW51aW5nLCBhbmQgY2FjaGUgdGhlIHBhcmVudCBtZXNzYWdlLlxuICAgICAqL1xuICAgIGFzeW5jIHNldHVwKHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLl9pbml0aWFsaXplZDtcbiAgICAgICAgdGhpcy5fa2VybmVsLl9wYXJlbnRfaGVhZGVyID0gdGhpcy5fcHlvZGlkZS50b1B5KHBhcmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgY29kZSB3aXRoIHRoZSBpbnRlcnByZXRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBpbmNvbWluZyBtZXNzYWdlIHdpdGggdGhlIGNvZGUgdG8gZXhlY3V0ZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHB1Ymxpc2hFeGVjdXRpb25SZXN1bHQgPSAocHJvbXB0X2NvdW50LCBkYXRhLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVuZGxlID0ge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbl9jb3VudDogcHJvbXB0X2NvdW50LFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZm9ybWF0UmVzdWx0KGRhdGEpLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLmZvcm1hdFJlc3VsdChtZXRhZGF0YSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHBhcmVudEhlYWRlcjogdGhpcy5mb3JtYXRSZXN1bHQodGhpcy5fa2VybmVsLl9wYXJlbnRfaGVhZGVyKVsnaGVhZGVyJ10sXG4gICAgICAgICAgICAgICAgYnVuZGxlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdleGVjdXRlX3Jlc3VsdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHVibGlzaEV4ZWN1dGlvbkVycm9yID0gKGVuYW1lLCBldmFsdWUsIHRyYWNlYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVuZGxlID0ge1xuICAgICAgICAgICAgICAgIGVuYW1lOiBlbmFtZSxcbiAgICAgICAgICAgICAgICBldmFsdWU6IGV2YWx1ZSxcbiAgICAgICAgICAgICAgICB0cmFjZWJhY2s6IHRyYWNlYmFjayxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgcGFyZW50SGVhZGVyOiB0aGlzLmZvcm1hdFJlc3VsdCh0aGlzLl9rZXJuZWwuX3BhcmVudF9oZWFkZXIpWydoZWFkZXInXSxcbiAgICAgICAgICAgICAgICBidW5kbGUsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2V4ZWN1dGVfZXJyb3InLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsZWFyT3V0cHV0Q2FsbGJhY2sgPSAod2FpdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVuZGxlID0ge1xuICAgICAgICAgICAgICAgIHdhaXQ6IHRoaXMuZm9ybWF0UmVzdWx0KHdhaXQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRIZWFkZXI6IHRoaXMuZm9ybWF0UmVzdWx0KHRoaXMuX2tlcm5lbC5fcGFyZW50X2hlYWRlcilbJ2hlYWRlciddLFxuICAgICAgICAgICAgICAgIGJ1bmRsZSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xlYXJfb3V0cHV0JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkaXNwbGF5RGF0YUNhbGxiYWNrID0gKGRhdGEsIG1ldGFkYXRhLCB0cmFuc2llbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1bmRsZSA9IHtcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmZvcm1hdFJlc3VsdChkYXRhKSxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5mb3JtYXRSZXN1bHQobWV0YWRhdGEpLFxuICAgICAgICAgICAgICAgIHRyYW5zaWVudDogdGhpcy5mb3JtYXRSZXN1bHQodHJhbnNpZW50KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgcGFyZW50SGVhZGVyOiB0aGlzLmZvcm1hdFJlc3VsdCh0aGlzLl9rZXJuZWwuX3BhcmVudF9oZWFkZXIpWydoZWFkZXInXSxcbiAgICAgICAgICAgICAgICBidW5kbGUsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Rpc3BsYXlfZGF0YScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdXBkYXRlRGlzcGxheURhdGFDYWxsYmFjayA9IChkYXRhLCBtZXRhZGF0YSwgdHJhbnNpZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidW5kbGUgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5mb3JtYXRSZXN1bHQoZGF0YSksXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRoaXMuZm9ybWF0UmVzdWx0KG1ldGFkYXRhKSxcbiAgICAgICAgICAgICAgICB0cmFuc2llbnQ6IHRoaXMuZm9ybWF0UmVzdWx0KHRyYW5zaWVudCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHBhcmVudEhlYWRlcjogdGhpcy5mb3JtYXRSZXN1bHQodGhpcy5fa2VybmVsLl9wYXJlbnRfaGVhZGVyKVsnaGVhZGVyJ10sXG4gICAgICAgICAgICAgICAgYnVuZGxlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGVfZGlzcGxheV9kYXRhJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdWJsaXNoU3RyZWFtQ2FsbGJhY2sgPSAobmFtZSwgdGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVuZGxlID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuZm9ybWF0UmVzdWx0KG5hbWUpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuZm9ybWF0UmVzdWx0KHRleHQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRIZWFkZXI6IHRoaXMuZm9ybWF0UmVzdWx0KHRoaXMuX2tlcm5lbC5fcGFyZW50X2hlYWRlcilbJ2hlYWRlciddLFxuICAgICAgICAgICAgICAgIGJ1bmRsZSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RyZWFtJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zdGRvdXRfc3RyZWFtLnB1Ymxpc2hfc3RyZWFtX2NhbGxiYWNrID0gcHVibGlzaFN0cmVhbUNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9zdGRlcnJfc3RyZWFtLnB1Ymxpc2hfc3RyZWFtX2NhbGxiYWNrID0gcHVibGlzaFN0cmVhbUNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9pbnRlcnByZXRlci5kaXNwbGF5X3B1Yi5jbGVhcl9vdXRwdXRfY2FsbGJhY2sgPSBjbGVhck91dHB1dENhbGxiYWNrO1xuICAgICAgICB0aGlzLl9pbnRlcnByZXRlci5kaXNwbGF5X3B1Yi5kaXNwbGF5X2RhdGFfY2FsbGJhY2sgPSBkaXNwbGF5RGF0YUNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9pbnRlcnByZXRlci5kaXNwbGF5X3B1Yi51cGRhdGVfZGlzcGxheV9kYXRhX2NhbGxiYWNrID1cbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXlEYXRhQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2ludGVycHJldGVyLmRpc3BsYXlob29rLnB1Ymxpc2hfZXhlY3V0aW9uX3Jlc3VsdCA9IHB1Ymxpc2hFeGVjdXRpb25SZXN1bHQ7XG4gICAgICAgIHRoaXMuX2ludGVycHJldGVyLmlucHV0ID0gdGhpcy5pbnB1dC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9pbnRlcnByZXRlci5nZXRwYXNzID0gdGhpcy5nZXRwYXNzLmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX2tlcm5lbC5ydW4oY29udGVudC5jb2RlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuZm9ybWF0UmVzdWx0KHJlcyk7XG4gICAgICAgIGlmIChyZXN1bHRzWydzdGF0dXMnXSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgcHVibGlzaEV4ZWN1dGlvbkVycm9yKHJlc3VsdHNbJ2VuYW1lJ10sIHJlc3VsdHNbJ2V2YWx1ZSddLCByZXN1bHRzWyd0cmFjZWJhY2snXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBsZXRlIHRoZSBjb2RlIHN1Ym1pdHRlZCBieSBhIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgaW5jb21pbmcgbWVzc2FnZSB3aXRoIHRoZSBjb2RlIHRvIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbXBsZXRlKGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2tlcm5lbC5jb21wbGV0ZShjb250ZW50LmNvZGUsIGNvbnRlbnQuY3Vyc29yX3Bvcyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmZvcm1hdFJlc3VsdChyZXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zcGVjdCB0aGUgY29kZSBzdWJtaXR0ZWQgYnkgYSB1c2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGluY29taW5nIG1lc3NhZ2Ugd2l0aCB0aGUgY29kZSB0byBpbnNwZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIGluc3BlY3QoY29udGVudCwgcGFyZW50KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0dXAocGFyZW50KTtcbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5fa2VybmVsLmluc3BlY3QoY29udGVudC5jb2RlLCBjb250ZW50LmN1cnNvcl9wb3MsIGNvbnRlbnQuZGV0YWlsX2xldmVsKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuZm9ybWF0UmVzdWx0KHJlcyk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBjb2RlIGZvciBjb21wbGV0ZW5lc3Mgc3VibWl0dGVkIGJ5IGEgdXNlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBpbmNvbWluZyBtZXNzYWdlIHdpdGggdGhlIGNvZGUgdG8gY2hlY2suXG4gICAgICovXG4gICAgYXN5bmMgaXNDb21wbGV0ZShjb250ZW50LCBwYXJlbnQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXR1cChwYXJlbnQpO1xuICAgICAgICBjb25zdCByZXMgPSB0aGlzLl9rZXJuZWwuaXNfY29tcGxldGUoY29udGVudC5jb2RlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuZm9ybWF0UmVzdWx0KHJlcyk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNwb25kIHRvIHRoZSBjb21tSW5mb1JlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgaW5jb21pbmcgbWVzc2FnZSB3aXRoIHRoZSBjb21tIHRhcmdldCBuYW1lLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1JbmZvKGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2tlcm5lbC5jb21tX2luZm8oY29udGVudC50YXJnZXRfbmFtZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmZvcm1hdFJlc3VsdChyZXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tbXM6IHJlc3VsdHMsXG4gICAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc3BvbmQgdG8gdGhlIGNvbW1PcGVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGluY29taW5nIG1lc3NhZ2Ugd2l0aCB0aGUgY29tbSBvcGVuLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1PcGVuKGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2tlcm5lbC5jb21tX21hbmFnZXIuY29tbV9vcGVuKHRoaXMuX3B5b2RpZGUudG9QeShjb250ZW50KSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmZvcm1hdFJlc3VsdChyZXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzcG9uZCB0byB0aGUgY29tbU1zZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBpbmNvbWluZyBtZXNzYWdlIHdpdGggdGhlIGNvbW0gbXNnLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1Nc2coY29udGVudCwgcGFyZW50KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0dXAocGFyZW50KTtcbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5fa2VybmVsLmNvbW1fbWFuYWdlci5jb21tX21zZyh0aGlzLl9weW9kaWRlLnRvUHkoY29udGVudCkpO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5mb3JtYXRSZXN1bHQocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc3BvbmQgdG8gdGhlIGNvbW1DbG9zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBpbmNvbWluZyBtZXNzYWdlIHdpdGggdGhlIGNvbW0gY2xvc2UuXG4gICAgICovXG4gICAgYXN5bmMgY29tbUNsb3NlKGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2tlcm5lbC5jb21tX21hbmFnZXIuY29tbV9jbG9zZSh0aGlzLl9weW9kaWRlLnRvUHkoY29udGVudCkpO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5mb3JtYXRSZXN1bHQocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIGlucHV0IHJlcXVlc3QgYnkgZ2V0dGluZyBiYWNrIHRoZSByZXBseSBmcm9tIHRoZSBtYWluIHRocmVhZFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGluY29taW5nIG1lc3NhZ2Ugd2l0aCB0aGUgcmVwbHlcbiAgICAgKi9cbiAgICBhc3luYyBpbnB1dFJlcGx5KGNvbnRlbnQsIHBhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwKHBhcmVudCk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVJbnB1dFJlcGx5KGNvbnRlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgaW5wdXQgcmVxdWVzdCB0byB0aGUgZnJvbnQtZW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb21wdCB0aGUgdGV4dCB0byBzaG93IGF0IHRoZSBwcm9tcHRcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgSXMgdGhlIHJlcXVlc3QgZm9yIGEgcGFzc3dvcmQ/XG4gICAgICovXG4gICAgYXN5bmMgc2VuZElucHV0UmVxdWVzdChwcm9tcHQsIHBhc3N3b3JkKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB7XG4gICAgICAgICAgICBwcm9tcHQsXG4gICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgfTtcbiAgICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ2lucHV0X3JlcXVlc3QnLFxuICAgICAgICAgICAgcGFyZW50SGVhZGVyOiB0aGlzLmZvcm1hdFJlc3VsdCh0aGlzLl9rZXJuZWwuX3BhcmVudF9oZWFkZXIpWydoZWFkZXInXSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRwYXNzKHByb21wdCkge1xuICAgICAgICBwcm9tcHQgPSB0eXBlb2YgcHJvbXB0ID09PSAndW5kZWZpbmVkJyA/ICcnIDogcHJvbXB0O1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmRJbnB1dFJlcXVlc3QocHJvbXB0LCB0cnVlKTtcbiAgICAgICAgY29uc3QgcmVwbHlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVJbnB1dFJlcGx5ID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlcGx5UHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFsndmFsdWUnXTtcbiAgICB9XG4gICAgYXN5bmMgaW5wdXQocHJvbXB0KSB7XG4gICAgICAgIHByb21wdCA9IHR5cGVvZiBwcm9tcHQgPT09ICd1bmRlZmluZWQnID8gJycgOiBwcm9tcHQ7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZElucHV0UmVxdWVzdChwcm9tcHQsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgcmVwbHlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVJbnB1dFJlcGx5ID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlcGx5UHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFsndmFsdWUnXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIGNvbW0gbWVzc2FnZSB0byB0aGUgZnJvbnQtZW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIGNvbW0gbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudC5cbiAgICAgKiBAcGFyYW0gbWV0YWRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSBpZGVudCBUaGUgaWRlbnQuXG4gICAgICogQHBhcmFtIGJ1ZmZlcnMgVGhlIGJpbmFyeSBidWZmZXJzLlxuICAgICAqL1xuICAgIGFzeW5jIHNlbmRDb21tKHR5cGUsIGNvbnRlbnQsIG1ldGFkYXRhLCBpZGVudCwgYnVmZmVycykge1xuICAgICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgY29udGVudDogdGhpcy5mb3JtYXRSZXN1bHQoY29udGVudCksXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5mb3JtYXRSZXN1bHQobWV0YWRhdGEpLFxuICAgICAgICAgICAgaWRlbnQ6IHRoaXMuZm9ybWF0UmVzdWx0KGlkZW50KSxcbiAgICAgICAgICAgIGJ1ZmZlcnM6IHRoaXMuZm9ybWF0UmVzdWx0KGJ1ZmZlcnMpLFxuICAgICAgICAgICAgcGFyZW50SGVhZGVyOiB0aGlzLmZvcm1hdFJlc3VsdCh0aGlzLl9rZXJuZWwuX3BhcmVudF9oZWFkZXIpWydoZWFkZXInXSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@datalayer/jupyterlite-ipykernel/lib/worker.js\n"));

/***/ }),

/***/ "./node_modules/@datalayer/jupyterlite-kernel/lib/kernel.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datalayer/jupyterlite-kernel/lib/kernel.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BaseKernel\": function() { return /* binding */ BaseKernel; }\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/services */ \"./node_modules/@jupyterlab/services/lib/index.js\");\n/* harmony import */ var _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lumino/signaling */ \"./node_modules/@lumino/signaling/dist/index.es6.js\");\n\n\n/**\n * A base kernel class handling basic kernel messaging.\n */\nclass BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__.Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, location, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._location = location;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The location in the virtual filesystem from which the kernel was started.\n     */\n    get location() {\n        return this._location;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimic ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execute result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        if (content.store_history) {\n            this._executionCount++;\n        }\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        if (content.store_history) {\n            this._history.push([0, 0, content.code]);\n        }\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = _jupyterlab_services__WEBPACK_IMPORTED_MODULE_0__.KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@datalayer/jupyterlite-kernel/lib/kernel.js\n"));

/***/ }),

/***/ "./node_modules/comlink/dist/esm/comlink.mjs":
/*!***************************************************!*\
  !*** ./node_modules/comlink/dist/esm/comlink.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEndpoint\": function() { return /* binding */ createEndpoint; },\n/* harmony export */   \"expose\": function() { return /* binding */ expose; },\n/* harmony export */   \"finalizer\": function() { return /* binding */ finalizer; },\n/* harmony export */   \"proxy\": function() { return /* binding */ proxy; },\n/* harmony export */   \"proxyMarker\": function() { return /* binding */ proxyMarker; },\n/* harmony export */   \"releaseProxy\": function() { return /* binding */ releaseProxy; },\n/* harmony export */   \"transfer\": function() { return /* binding */ transfer; },\n/* harmony export */   \"transferHandlers\": function() { return /* binding */ transferHandlers; },\n/* harmony export */   \"windowEndpoint\": function() { return /* binding */ windowEndpoint; },\n/* harmony export */   \"wrap\": function() { return /* binding */ wrap; }\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\n\n//# sourceMappingURL=comlink.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/comlink/dist/esm/comlink.mjs\n"));

/***/ })

}]);