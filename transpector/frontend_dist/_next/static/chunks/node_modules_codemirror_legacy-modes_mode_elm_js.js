"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_codemirror_legacy-modes_mode_elm_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/elm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/elm.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"elm\": function() { return /* binding */ elm; }\n/* harmony export */ });\nfunction switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nconst elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZWxtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsMEJBQTBCOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBLDZCQUE2QixTQUFTLGdCQUFnQjtBQUN0RCw2QkFBNkIsU0FBUyxXQUFXOztBQUVqRDtBQUNBLDZDQUE2QyxjQUFjO0FBQzNEO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2VsbS5qcz82YTZlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGYpXG57XG4gIHNldFN0YXRlKGYpO1xuICByZXR1cm4gZihzb3VyY2UsIHNldFN0YXRlKTtcbn1cblxudmFyIGxvd2VyUkUgPSAvW2Etel0vO1xudmFyIHVwcGVyUkUgPSAvW0EtWl0vO1xudmFyIGlubmVyUkUgPSAvW2EtekEtWjAtOV9dLztcblxudmFyIGRpZ2l0UkUgPSAvWzAtOV0vO1xudmFyIGhleFJFID0gL1swLTlBLUZhLWZdLztcbnZhciBzeW1ib2xSRSA9IC9bLSYqKy5cXFxcLzw+PT9efDpdLztcbnZhciBzcGVjaWFsUkUgPSAvWygpLFtcXF17fV0vO1xudmFyIHNwYWNlc1JFID0gL1sgXFx2XFxmXS87IC8vIG5ld2xpbmVzIGFyZSBoYW5kbGVkIGluIHRva2VuaXplclxuXG5mdW5jdGlvbiBub3JtYWwoKVxue1xuICByZXR1cm4gZnVuY3Rpb24oc291cmNlLCBzZXRTdGF0ZSlcbiAge1xuICAgIGlmIChzb3VyY2UuZWF0V2hpbGUoc3BhY2VzUkUpKVxuICAgIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaGFyID0gc291cmNlLm5leHQoKTtcblxuICAgIGlmIChzcGVjaWFsUkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICByZXR1cm4gKGNoYXIgPT09ICd7JyAmJiBzb3VyY2UuZWF0KCctJykpXG4gICAgICAgID8gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBNdWx0aUNvbW1lbnQoMSkpXG4gICAgICAgIDogKGNoYXIgPT09ICdbJyAmJiBzb3VyY2UubWF0Y2goJ2dsc2x8JykpXG4gICAgICAgID8gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBHbHNsKVxuICAgICAgICA6ICdidWlsdGluJztcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gJ1xcJycpXG4gICAge1xuICAgICAgcmV0dXJuIHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wQ2hhcik7XG4gICAgfVxuXG4gICAgaWYgKGNoYXIgPT09ICdcIicpXG4gICAge1xuICAgICAgcmV0dXJuIHNvdXJjZS5lYXQoJ1wiJylcbiAgICAgICAgPyBzb3VyY2UuZWF0KCdcIicpXG4gICAgICAgID8gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBNdWx0aVN0cmluZylcbiAgICAgICAgOiAnc3RyaW5nJ1xuICAgICAgOiBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcFNpbmdsZVN0cmluZyk7XG4gICAgfVxuXG4gICAgaWYgKHVwcGVyUkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICBzb3VyY2UuZWF0V2hpbGUoaW5uZXJSRSk7XG4gICAgICByZXR1cm4gJ3R5cGUnO1xuICAgIH1cblxuICAgIGlmIChsb3dlclJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgdmFyIGlzRGVmID0gc291cmNlLnBvcyA9PT0gMTtcbiAgICAgIHNvdXJjZS5lYXRXaGlsZShpbm5lclJFKTtcbiAgICAgIHJldHVybiBpc0RlZiA/IFwiZGVmXCIgOiBcInZhcmlhYmxlXCI7XG4gICAgfVxuXG4gICAgaWYgKGRpZ2l0UkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICBpZiAoY2hhciA9PT0gJzAnKVxuICAgICAge1xuICAgICAgICBpZiAoc291cmNlLmVhdCgvW3hYXS8pKVxuICAgICAgICB7XG4gICAgICAgICAgc291cmNlLmVhdFdoaWxlKGhleFJFKTsgLy8gc2hvdWxkIHJlcXVpcmUgYXQgbGVhc3QgMVxuICAgICAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlXG4gICAgICB7XG4gICAgICAgIHNvdXJjZS5lYXRXaGlsZShkaWdpdFJFKTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3VyY2UuZWF0KCcuJykpXG4gICAgICB7XG4gICAgICAgIHNvdXJjZS5lYXRXaGlsZShkaWdpdFJFKTsgLy8gc2hvdWxkIHJlcXVpcmUgYXQgbGVhc3QgMVxuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZS5lYXQoL1tlRV0vKSlcbiAgICAgIHtcbiAgICAgICAgc291cmNlLmVhdCgvWy0rXS8pO1xuICAgICAgICBzb3VyY2UuZWF0V2hpbGUoZGlnaXRSRSk7IC8vIHNob3VsZCByZXF1aXJlIGF0IGxlYXN0IDFcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgIH1cblxuICAgIGlmIChzeW1ib2xSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIGlmIChjaGFyID09PSAnLScgJiYgc291cmNlLmVhdCgnLScpKVxuICAgICAge1xuICAgICAgICBzb3VyY2Uuc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH1cbiAgICAgIHNvdXJjZS5lYXRXaGlsZShzeW1ib2xSRSk7XG4gICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgfVxuXG4gICAgaWYgKGNoYXIgPT09ICdfJylcbiAgICB7XG4gICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaG9tcE11bHRpQ29tbWVudChuZXN0KVxue1xuICBpZiAobmVzdCA9PSAwKVxuICB7XG4gICAgcmV0dXJuIG5vcm1hbCgpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihzb3VyY2UsIHNldFN0YXRlKVxuICB7XG4gICAgd2hpbGUgKCFzb3VyY2UuZW9sKCkpXG4gICAge1xuICAgICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuICAgICAgaWYgKGNoYXIgPT0gJ3snICYmIHNvdXJjZS5lYXQoJy0nKSlcbiAgICAgIHtcbiAgICAgICAgKytuZXN0O1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2hhciA9PSAnLScgJiYgc291cmNlLmVhdCgnfScpKVxuICAgICAge1xuICAgICAgICAtLW5lc3Q7XG4gICAgICAgIGlmIChuZXN0ID09PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgICAgICAgIHJldHVybiAnY29tbWVudCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0U3RhdGUoY2hvbXBNdWx0aUNvbW1lbnQobmVzdCkpO1xuICAgIHJldHVybiAnY29tbWVudCc7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hvbXBNdWx0aVN0cmluZyhzb3VyY2UsIHNldFN0YXRlKVxue1xuICB3aGlsZSAoIXNvdXJjZS5lb2woKSlcbiAge1xuICAgIHZhciBjaGFyID0gc291cmNlLm5leHQoKTtcbiAgICBpZiAoY2hhciA9PT0gJ1wiJyAmJiBzb3VyY2UuZWF0KCdcIicpICYmIHNvdXJjZS5lYXQoJ1wiJykpXG4gICAge1xuICAgICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgICAgcmV0dXJuICdzdHJpbmcnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGNob21wU2luZ2xlU3RyaW5nKHNvdXJjZSwgc2V0U3RhdGUpXG57XG4gIHdoaWxlIChzb3VyY2Uuc2tpcFRvKCdcXFxcXCInKSkgeyBzb3VyY2UubmV4dCgpOyBzb3VyY2UubmV4dCgpOyB9XG4gIGlmIChzb3VyY2Uuc2tpcFRvKCdcIicpKVxuICB7XG4gICAgc291cmNlLm5leHQoKTtcbiAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgcmV0dXJuICdzdHJpbmcnO1xuICB9XG4gIHNvdXJjZS5za2lwVG9FbmQoKTtcbiAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICByZXR1cm4gJ2Vycm9yJztcbn1cblxuZnVuY3Rpb24gY2hvbXBDaGFyKHNvdXJjZSwgc2V0U3RhdGUpXG57XG4gIHdoaWxlIChzb3VyY2Uuc2tpcFRvKFwiXFxcXCdcIikpIHsgc291cmNlLm5leHQoKTsgc291cmNlLm5leHQoKTsgfVxuICBpZiAoc291cmNlLnNraXBUbyhcIidcIikpXG4gIHtcbiAgICBzb3VyY2UubmV4dCgpO1xuICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICByZXR1cm4gJ3N0cmluZyc7XG4gIH1cbiAgc291cmNlLnNraXBUb0VuZCgpO1xuICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gIHJldHVybiAnZXJyb3InO1xufVxuXG5mdW5jdGlvbiBjaG9tcEdsc2woc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKCFzb3VyY2UuZW9sKCkpXG4gIHtcbiAgICB2YXIgY2hhciA9IHNvdXJjZS5uZXh0KCk7XG4gICAgaWYgKGNoYXIgPT09ICd8JyAmJiBzb3VyY2UuZWF0KCddJykpXG4gICAge1xuICAgICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgICAgcmV0dXJuICdzdHJpbmcnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ3N0cmluZyc7XG59XG5cbnZhciB3ZWxsS25vd25Xb3JkcyA9IHtcbiAgY2FzZTogMSxcbiAgb2Y6IDEsXG4gIGFzOiAxLFxuICBpZjogMSxcbiAgdGhlbjogMSxcbiAgZWxzZTogMSxcbiAgbGV0OiAxLFxuICAgIGluOiAxLFxuICB0eXBlOiAxLFxuICBhbGlhczogMSxcbiAgbW9kdWxlOiAxLFxuICB3aGVyZTogMSxcbiAgaW1wb3J0OiAxLFxuICBleHBvc2luZzogMSxcbiAgcG9ydDogMVxufTtcblxuZXhwb3J0IGNvbnN0IGVsbSA9IHtcbiAgbmFtZTogXCJlbG1cIixcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24gKCkgIHsgcmV0dXJuIHsgZjogbm9ybWFsKCkgfTsgfSxcbiAgY29weVN0YXRlOiAgZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHsgZjogcy5mIH07IH0sXG5cbiAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgdHlwZSA9IHN0YXRlLmYoc3RyZWFtLCBmdW5jdGlvbihzKSB7IHN0YXRlLmYgPSBzOyB9KTtcbiAgICB2YXIgd29yZCA9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgcmV0dXJuICh3ZWxsS25vd25Xb3Jkcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSkgPyAna2V5d29yZCcgOiB0eXBlO1xuICB9LFxuXG4gIGxhbmd1YWdlRGF0YToge1xuICAgIGNvbW1lbnRUb2tlbnM6IHtsaW5lOiBcIi0tXCJ9XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/legacy-modes/mode/elm.js\n"));

/***/ })

}]);